// NOTE: it is strongly advised to override
// only those settings that you wish to change
// in your Users/SQLTools.sublime-settings
{
    "debug"                 : true,
    "thread_timeout"        : 15,     // query timeout in seconds
    "history_size"          : 100,
    "show_result_on_window" : false,
    "clear_output"          : false,
    "safe_limit"            : false,
    "show_query"            : false,
    "expand_to_paragraph"   : false,
    /**
     * The list of syntax selectors for which the plugin autocompletion will be active.
     * An empty list means autocompletion always active.
     */
    "selectors": ["source.sql", "source.pgsql", "source.plpgsql.postgres", "source.plsql.oracle", "source.tsql"],
    /**
     * Possible values for autocompletion: "basic", "smart" or false (disable)
     * Completion keywords case is controlled by format.keyword_case (see below)
     */
    "autocompletion": "smart",
    /**
     * If DB cli binary is not in PATH, set the full path in "cli" section.
     * Note: forward slashes ("/") should be used in path. Example:
     *  "mysql"   : "c:/Program Files/MySQL/MySQL Server 5.7/bin/mysql.exe"
     */
    "cli" : {
        "mysql"   : "mysql",
        "pgsql"   : "psql",
        "oracle"  : "sqlplus",
        "vertica" : "vsql",
        "sqsh"    : "sqsh",
        "firebird": "isql",
        "sqlite"  : "sqlite3"
    },
    "show_records" : {
        "limit" : 50
    },
    "format" : {
        "keyword_case"    : "upper",
        "identifier_case" : null,
        "strip_comments"  : false,
        "indent_tabs"     : false,
        "indent_width"    : 4,
        "reindent"        : true
    },
    "unescape_quotes" : [
        "php"
    ],
    /**
     * Client options for you RDBMS.
     * In this file, the section cli has the names you can use here. Eg: "pgsql": "psql"
     * So here, you must have "psql with the same sections listed bellow (options, before, args and queries)"
     *
     * Avoid changing the brackets content in "args"
     */
    "cli_options": {
        "pgsql": {
            "options": ["--no-password"],
            "before": [],
            "args": "-h {host} -p {port} -U {username} -d {database}",
            "queries": {
                "desc" : {
                    "query": "select '|' || quote_ident(table_schema)||'.'||quote_ident(table_name) ||'|' as tblname from information_schema.tables where table_schema = any(current_schemas(false)) and table_schema not in ('pg_catalog', 'information_schema') order by table_schema = current_schema() desc, table_schema, table_name",
                    "options": ["--tuples-only", "--no-psqlrc"],
                    "format" : "|%s|"
                },
                "desc table": {
                    "query": "\\d+ %s",
                    "options": [],
                    "format" : "|%s|"
                },
                "show records": {
                    "query": "select * from {0} limit {1}",
                    "options": [],
                    "format" : "|%s|"
                },
                "columns": {
                    "query": "select '|' || quote_ident(table_name) || '.' || quote_ident(column_name) || '|' from information_schema.columns where table_schema = any(current_schemas(false)) and table_schema not in ('pg_catalog', 'information_schema') order by table_name, ordinal_position",
                    "options": ["--tuples-only", "--no-psqlrc"],
                    "format" : "|%s|"
                },
                "functions": {
                    "query": "select '|' || quote_ident(n.nspname)||'.'||quote_ident(f.proname) || '(' || pg_get_function_identity_arguments(f.oid) || ')' || '|' as funname from pg_catalog.pg_proc as f inner join pg_catalog.pg_namespace as n on n.oid = f.pronamespace where f.proisagg = false and n.nspname = any(current_schemas(false)) and n.nspname not in ('pg_catalog', 'information_schema')",
                    "options": ["--tuples-only", "--no-psqlrc"],
                    "format" : "|%s|"
                },
                "desc function": {
                    "query": "\\sf %s",
                    "options": [],
                    "format" : "|%s|"
                },
                "explain plan": {
                    "query": "explain {0};",
                    "options": [],
                    "format" : "|%s|"
                }
            }
        },
        "oracle": {
            "options": ["-S"],
            "before": [
                "SET AUTO           OFF",
                "SET COLSEP         '|'",
                "SET FEED           ON",
                "SET FEEDBACK       ON",
                "SET HEADING        ON",
                "SET LINESIZE       32767",
                "SET LONG           100",
                "SET NULL           @",
                "SET PAGESIZE       0 EMBEDDED ON",
                "SET SERVEROUTPUT   ON",
                "SET SQLBLANKLINES  ON",
                "SET SQLPROMPT      ''",
                "SET TAB            OFF",
                "SET TI             ON",
                "SET TIMI           OFF",
                "SET TRIMSPOOL      OFF",
                "SET UND            '-'",
                "SET VERIFY         OFF ",
                "SET WRAP           OFF"
            ],
            "args": "{username}/{password}@\"(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={host})(PORT={port})))(CONNECT_DATA=(SERVICE_NAME={service})))\"",
            "queries": {
                "desc" : {
                    "query": "select concat(concat(concat(concat('|', owner), '.'), table_name), '|') as tbls from all_tables where owner = sys_context('USERENV', 'CURRENT_SCHEMA');",
                    "options": ["-S"],
                    "format" : "|%s|"
                },
                "columns": {
                    "query": "select concat(concat(concat(concat('|', c.table_name), '.'), c.column_name), '|') as cols from all_tab_columns c inner join all_tables t ON c.owner = t.owner and c.table_name = t.table_name where c.owner = sys_context('USERENV', 'CURRENT_SCHEMA');",
                    "options": ["-S"],
                    "format" : "|%s|"
                },
                "desc table": {
                    "query": "desc %s;",
                    "options": ["-S"],
                    "format" : "|%s|"
                },
                "show records": {
                    "query": "select * from {0} WHERE ROWNUM <= {1};",
                    "options": ["-S"],
                    "format" : "|%s|"
                },
                "explain plan": {
                    "query": "explain plan for {0};\nselect plan_table_output from table(dbms_xplan.display());",
                    "options": ["-S"],
                    "format" : "|%s|"
                }
            }
        },
        "mysql": {
            "options": ["-f", "--table"],
            "before": [],
            "args": "-h{host} -P{port} -u\"{username}\" -p\"{password}\" -D\"{database}\"",
            "queries": {
                "desc" : {
                    "query": "select concat(table_schema, '.', table_name) from information_schema.tables where table_schema = database() order by table_name;",
                    "options": ["-f", "--table", "--skip-column-names"],
                    "format" : "|%s|"
                },
                "desc table": {
                    "query": "desc `%s`",
                    "options": ["-f", "--table"],
                    "format" : "|%s|"
                },
                "show records": {
                    "query": "select * from `{0}` limit {1}",
                    "options": ["-f", "--table"],
                    "format" : "|%s|"
                },
                "columns": {
                    "query": "select concat(table_name, '.', column_name) from information_schema.columns where table_schema = database() order by table_name, ordinal_position;",
                    "options": ["-f", "--table", "--skip-column-names"],
                    "format" : "|%s|"
                },
                "functions": {
                    "query": "select concat(routine_schema, '.', routine_name) from information_schema.routines where routine_schema = database();",
                    "options": ["-f", "--table", "--skip-column-names"],
                    "format" : "|%s|"
                },
                "explain plan": {
                    "query": "explain {0};",
                    "options": ["-f", "--table"],
                    "format" : "|%s|"
                }
            }
        },
        "vertica": {
            "options": [],
            "before" : [],
            "args": "-h {host} -p {port} -U \"{username}\" -w \"{password}\" -d \"{database}\"",
            "queries": {
                "desc" : {
                    "query": "select '|' || table_schema || '.' || table_name || '|' as tblname from v_catalog.tables where is_system_table = false",
                    "options": ["--tuples-only", "--no-vsqlrc"],
                    "format" : "|%s|"
                },
                "columns": {
                    "query": "select '|' || table_name || '.' || column_name || '|' as tblname from v_catalog.columns where is_system_table = false order by table_name, ordinal_position",
                    "options": ["--tuples-only", "--no-vsqlrc"],
                    "format" : "|%s|"
                },
                "desc table": {
                    "query": "\\d %s",
                    "options": [],
                    "format" : "|%s|"
                },
                "show records": {
                    "query": "select * from {0} limit {1}",
                    "options": [],
                    "format" : "|%s|"
                },
                "explain plan": {
                    "query": "explain {0};",
                    "options": [],
                    "format" : "|%s|"
                }
            }
        },
        "sqsh": {
            "options": [],
            "before": ["\\set semicolon_cmd=\"\\go -mpretty -l\""],
            "args": "-S {host}:{port} -U\"{username}\" -P\"{password}\" -D{database}",
            "queries": {
                "desc": {
                    "query": "select concat(table_schema, '.', table_name) from information_schema.tables order by table_name;",
                    "before" :["\\set semicolon_cmd=\"\\go -mpretty -l -h -f\""],
                    "options": [],
                    "format": "|%s|"
                },
                "columns": {
                    "query": "select concat(table_name, '.', column_name) from information_schema.columns order by table_name, ordinal_position;",
                    "before" :["\\set semicolon_cmd=\"\\go -mpretty -l -h -f\""],
                    "options": [],
                    "format": "|%s|"
                },
                "desc table": {
                    "query": "exec sp_columns \"%s\";",
                    "options": [],
                    "before": ["\\set semicolon_cmd=\"\\go -mpretty -l -h -f\""],
                    "format": "|%s|"
                },
                "show records": {
                    "query": "select top {1} * from \"{0}\";",
                    "options": [],
                    "before": ["\\set semicolon_cmd=\"\\go -mpretty -l -h -f\""],
                    "format": "|%s|"
                }
            }
        },
        "sqlite": {
            "options": ["-column", "-noheader"],
            "before": [".headers on"],
            "args": "\"{database}\"",
            "queries": {
                "desc" : {
                    "query": ".headers off\nSELECT '|' || name || '|' FROM sqlite_master WHERE type='table';",
                    "options": [],
                    "format" : "|%s|"
                },
                "desc table": {
                    "query": ".schema \"%s\"",
                    "options": ["-column"],
                    "format" : "%s"
                },
                "show records": {
                    "query": "select * from \"{0}\" limit {1};",
                    "options": ["-column"],
                    "format" : "|%s|"
                },
                "explain plan": {
                    "query": "EXPLAIN QUERY PLAN {0};",
                    "options": ["-column"],
                    "format" : "|%s|"
                }
            }
        },
        "firebird": {
            "options": [],
            "before": [],
            "args": "-u \"{username}\" -p \"{password}\" \"{host}/{port}:{database}\"",
            "queries": {
                "desc" : {
                    "query": "select '|' || rdb$relation_name || '|' from rdb$relations where rdb$view_blr is null and (rdb$system_flag is null or rdb$system_flag = 0);",
                    "options": [],
                    "format" : "|%s|"
                },
                "desc table": {
                    "query": "show table \"%s\";",
                    "options": [],
                    "format" : "|%s|"
                },
                "show records": {
                    "query": "select first 100 * from \"%s\";",
                    "options": [],
                    "format" : "|%s|"
                }
            }
        }
    }
}
